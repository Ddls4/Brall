{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang14346\deflangfe14346{\fonttbl{\f0\fswiss\fprq2\fcharset0 Arial;}{\f1\froman\fprq2\fcharset0 Times New Roman;}{\f2\fswiss\fprq2\fcharset0 Calibri;}{\f3\fnil\fcharset2 Symbol;}}
{\colortbl ;\red0\green0\blue0;\red255\green255\blue0;\red255\green0\blue0;}
{\*\generator Riched20 10.0.19041}{\*\mmathPr\mnaryLim0\mdispDef1\mwrapIndent1440 }\viewkind4\uc1 
\pard\widctlpar\qc\cf1\f0\fs28\emdash  I.A proyecto \emdash\cf0\f1\fs24\par

\pard\widctlpar\line\par

\pard{\pntext\f3\'B7\tab}{\*\pn\pnlvlblt\pnf3\pnindent360{\pntxtb\'B7}}\widctlpar\fi-360\li720\cf1\f0\fs22 Descripci\'f3n:\par

\pard\widctlpar Una aplicaci\'f3n en Python que mand\'e9 por cable serial o Bluetooth informaci\'f3n a una placa raspberry pi pico, la cual se encuentra conectada a un teclado, al presionarlo producir\'e1 un sonido a trav\'e9s del cual una persona con discapacidad visual lo entienda.\cf0\f1\fs24\par
\line\par

\pard{\pntext\f3\'B7\tab}{\*\pn\pnlvlblt\pnf3\pnindent360{\pntxtb\'B7}}\widctlpar\fi-360\li720\cf1\f0\fs22 Requisitos:\par

\pard\widctlpar 1 Raspberry pi pico\cf0\f1\fs24\par
\cf1\f0\fs22 1 teclado o matriz de botones\~\cf0\f1\fs24\par
\cf1\f0\fs22 Muchos cables\~\cf0\f1\fs24\par
\cf1\f0\fs22 1 cable micro USB\~\cf0\f1\fs24\par
\line\par

\pard{\pntext\f3\'B7\tab}{\*\pn\pnlvlblt\pnf3\pnindent360{\pntxtb\'B7}}\widctlpar\fi-360\li720\cf1\f0\fs22 C\'f3digos:\par

\pard\widctlpar *PC: c\'f3digo en tkinter implementado para crear una interfaz la cual va a mandar la informaci\'f3n a la placa.\cf0\f1\fs24\par

\pard{\pntext\f3\'B7\tab}{\*\pn\pnlvlblt\pnf3\pnindent360{\pntxtb\'B7}}\widctlpar\fi-360\li720\cf1\f0\fs22 Crear la interfaz en tkinter.\par
{\pntext\f3\'B7\tab}Este tendr\'eda un input donde colocar el texto.\par
{\pntext\f3\'B7\tab}Colocar el texto en una variable\~\par
{\pntext\f3\'B7\tab}Mandarlo a la placa.\par

\pard\widctlpar\cf0\f1\fs24\par
\cf1\f0\fs22 Raspberry: Recibe el texto y lo traduce a Braille.\cf0\f1\fs24\par

\pard{\pntext\f3\'B7\tab}{\*\pn\pnlvlblt\pnf3\pnindent360{\pntxtb\'B7}}\widctlpar\fi-360\li720\cf1\f0\fs22 Recibe el texto\~\par
{\pntext\f3\'B7\tab}Usando su diccionario lo traduce a Braille\par
{\pntext\f3\'B7\tab}guarda la traducci\'f3n en una variable y la transforma en un array.\par
{\pntext\f3\'B7\tab}Manda el array al teclado para que la persona use el teclado\~\par
{\pntext\f3\'B7\tab}Circuito:\par

\pard\widctlpar\cf0\f1\fs24\par
\cf1\f0\fs22 blanco -> 1 / 2 / 3 / A\cf0\f1\fs24\par
\cf1\f0\fs22 naranja -> 4 / 5 / 6 / B\cf0\f1\fs24\par
\cf1\f0\fs22 Amarillo -> 7/ 8 / 9 / C\cf0\f1\fs24\par
\cf1\f0\fs22 verde -> * / 0 / # / D\cf0\f1\fs24\par
\par
\cf1\f0\fs22 azul -> * / 7 / 4 / 1\~\cf0\f1\fs24\par
\cf1\f0\fs22 marr\'f3n -> 0 / 8 / 5 / 2\cf0\f1\fs24\par
\cf1\f0\fs22 violeta -> # / 9 / 6 / 3\cf0\f1\fs24\par
\cf1\f0\fs22 verde -> D / C / B / A\cf0\f1\fs24\par

\pard\widctlpar\sa160\sl252\slmult1\kerning2\f2\fs22\par
\par

\pard\nowidctlpar\sa200\sl276\slmult1\kerning0\lang10 Una GUI en Visual Studio Code que sea un input que al apretar un bot\'f3n mande de informaci\'f3n del input a una placa Raspberry Pi Pico que teste usando Tonny y que esta use un print de lo que la pc le pase. Sin UART solo con el cabe USB.\par
\b Librer\'edas necesarias:\b0\par
pyserial: Para la comunicaci\'f3n serial.\par
tkinter: Para crear la interfaz gr\'e1fica.\par
Raspberry Pi Pico: Con MicroPython instalado.\par
\par
\b Ejecutar la aplicaci\'f3n\b0\par
Conecta la Raspberry Pi Pico a tu PC.\par
Ejecuta el script app2.py en tu PC.\par
Ingresa texto en la interfaz gr\'e1fica y presiona "Enviar". La Raspberry Pi Pico recibir\'e1 el texto y lo imprimir\'e1 en la consola y traducira a.\par
\par
\par

\pard\nowidctlpar\sa200\sl276\slmult1\qc\b\fs40 C\'f3digo en la Raspberry Pi Pico (MicroPython)\b0\fs22\par

\pard\nowidctlpar\sa200\sl276\slmult1\highlight2\lang1033 from machine import Pin, PWM\par
import time\par
import select\par
import sys\par
texto = ""\par
texto_recibido = ""\par
time.sleep(0.1)\par
# Pines del teclado matricial\par
Horisontal_pin = [2, 3, 4, 5]\par
Vertical_pin = [6, 7, 8, 9]\par
# Definir las teclas del teclado\par
keys = [['1', '2', "3", "A"],\par
        ['4', '5', "6", "B"],\par
        ['7', '8', "9", "C"],\par
        ['*', '0', "#", "D"]]\par
# Inicializar filas y columnas\par
rows = [Pin(pin, Pin.OUT) for pin in Horisontal_pin]\par
cols = [Pin(pin, Pin.IN, Pin.PULL_DOWN) for pin in Vertical_pin]\par
# Configurar buzzer pasivo en pin 20 con PWM\par
buzzer = PWM(Pin(20))\par
# Funci\'f3n beep para hacer sonar buzzer pasivo\par
def beep(frequency, duration):\par
    buzzer.freq(frequency)\par
    buzzer.duty_u16(60000)  # Duty cycle alto para mejor volumen (max 65535)\par
    time.sleep(duration)\par
    buzzer.duty_u16(0)\par
    time.sleep(0.1)\par
# Diccionario Braille con 6 puntos por letra\par
braille_dict = \{\par
    'a': [1, 0, 0, 0, 0, 0],\par
    'b': [1, 0, 1, 0, 0, 0],\par
    'c': [1, 1, 0, 0, 0, 0],\par
    'd': [1, 1, 0, 1, 0, 0],\par
    'e': [1, 0, 0, 1, 0, 0],\par
    'f': [1, 1, 1, 0, 0, 0],\par
    'g': [1, 1, 1, 1, 0, 0],\par
    'h': [1, 0, 1, 1, 0, 0],\par
    'i': [0, 1, 1, 0, 0, 0],\par
    'j': [0, 1, 1, 1, 0, 0],\par
    'k': [1, 0, 0, 0, 1, 0],\par
    'l': [1, 0, 1, 0, 1, 0],\par
    'm': [1, 1, 0, 0, 1, 0],\par
    'n': [1, 1, 0, 1, 1, 0],\par
    'o': [1, 0, 0, 1, 1, 0],\par
    'p': [1, 1, 1, 0, 1, 0],\par
    'q': [1, 1, 1, 1, 1, 0],\par
    'r': [1, 0, 1, 1, 1, 0],\par
    's': [0, 1, 1, 0, 1, 0],\par
    't': [0, 1, 1, 1, 1, 0],\par
    'u': [1, 0, 0, 0, 1, 1],\par
    'v': [1, 0, 1, 0, 1, 1],\par
    'w': [0, 1, 1, 1, 0, 1],\par
    'x': [1, 1, 0, 0, 1, 1],\par
    'y': [1, 1, 0, 1, 1, 1],\par
    'z': [1, 0, 0, 1, 1, 1],\par
    ' ': [0, 0, 0, 0, 0, 0],\par
\}\par
texto = ""\par
# Convertir texto a lista de patrones Braille\par
braille_letras = [braille_dict[letra] for letra in texto]\par
indice_actual = 0\par
# Funci\'f3n para escanear teclado\par
def scan_keypad():\par
    for row_idx, row in enumerate(rows):\par
        row.high()\par
        for col_idx, col in enumerate(cols):\par
            if col.value() == 1:\par
                time.sleep(0.2)\par
                row.low()\par
                return keys[row_idx][col_idx]\par
        row.low()\par
    return None\par
# Mostrar letra en Braille con sonidos en buzzer\par
def mostrar_braille(patron):\par
    print("Braille:", patron)\par
    for punto in patron:\par
        if punto == 1:\par
            beep(1000, 0.3)  # Sonido tono 1000Hz por 0.3s\par
        else:\par
            time.sleep(0.3)\par
        time.sleep(0.2)\par
    time.sleep(0.5)\par
# Funci\'f3n para validar si una tecla es correcta\par
def validar_tecla(tecla, patron_braille):\par
    # Teclas v\'e1lidas corresponden a las posiciones 1, 2, 4, 5, 7, 8\par
    posiciones_validas = \{\par
        '1': 0,  # 1 corresponde al primer punto\par
        '2': 1,  # 2 corresponde al segundo punto\par
        '4': 2,  # 4 corresponde al tercer punto\par
        '5': 3,  # 5 corresponde al cuarto punto\par
        '7': 4,  # 7 corresponde al quinto punto\par
        '8': 5   # 8 corresponde al sexto punto\par
    \}\par
    if tecla in posiciones_validas:\par
        posicion = posiciones_validas[tecla]\par
        if patron_braille[posicion] == 1:\par
            return True\par
    return False\par
# Bucle principal\par
beep(1200, 0.3)\par
texto = sys.stdin.readline().strip()\par
print("Texto recibido: ", texto)\par
beep(1000, 0.3)\par
while True:\par
    print("Sistema Braille iniciado")\par
    braille_letras = [braille_dict.get(letra, braille_dict[' ']) for letra in texto.lower()]\par
    indice_actual = 0\par
    \par
    print("Presiona A o B para avanzar a la siguiente letra...")\par
    tecla = None\par
    while not tecla:\par
        tecla = scan_keypad()\par
\par
    print(f"Tecla presionada: \{tecla\}")\par
\par
    if tecla in ['A', 'B']:\par
        letra_braille = braille_letras[indice_actual]\par
        mostrar_braille(letra_braille)\par
        indice_actual = (indice_actual + 1) % len(braille_letras)\par
    elif validar_tecla(tecla, braille_letras[indice_actual]):\par
        print(f"Tecla \{tecla\} correcta: beep!")\par
        beep(1200, 0.3)\par
    else:\par
        print(f"Tecla \{tecla\} incorrecta!")\par

\pard\nowidctlpar\sa200\sl276\slmult1\qc\highlight0\b\fs40\lang10 C\'f3digo en la PC (Python con Tkinter)\b0\fs22\par

\pard\nowidctlpar\sa200\sl276\slmult1\highlight2\lang1033 from time import sleep\par
import customtkinter\par
import speech_recognition as sr\par
import tkinter as tk\par
from tkinter import ttk\par
import serial\par
# Reconocedor de voz\par
r = sr.Recognizer()\par
# Funci\'f3n para enviar el texto\par
ser = serial.Serial('COM4', 115200)\par
def Enviar():\par
    texto = Entry1.get()\par
    ser.write((texto+'\\n').encode('utf-8'))\par
    Entry1.delete(0, 'end')\par
# Funci\'f3n para activar reconocimiento de voz y escribir en Entry1\par
def Voz():\par
    with sr.Microphone() as source:\par
        try:\par
            Entry1.delete(0, tk.END)\par
            Entry1.insert(0, "Escuchando...")\par
            root.update()\par
            audio_text = r.listen(source)\par
            t_aud = r.recognize_google(audio_text , language='es-ES')\par
            print("Reconocido:", t_aud)\par
            Entry1.delete(0, tk.END)\par
            Entry1.insert(0, t_aud)\par
        except:\par
            Entry1.delete(0, tk.END)\par
            Entry1.insert(0, "Lo siento, no entend\'ed lo que dijiste")\par
def cerrar():\par
    ser.close()\par
    root.destroy()\par
# Crear la ventana principal\par
root = customtkinter.CTk()\par
root.geometry("450x300")  # Largo x Alto\par
root.title("Enviar datos a Raspberry Pi Pico")\par
# Frame de la interfaz\par
frm = ttk.Frame(root, padding=10)\par
frm.grid()\par
# Botones en la columna 0\par
customtkinter.CTkButton(frm, text="Voz", command=Voz, width=80, height=80).grid(column=0, row=0, pady=5)\par
customtkinter.CTkButton(frm, text="Enviar", command=Enviar, width=80, height=80).grid(column=0, row=1, pady=5)\par
customtkinter.CTkButton(frm, text="Quitar", command=cerrar, width=80, height=80).grid(column=0, row=2, pady=5)\par
# Entry en la columna 1\par
Entry1 = customtkinter.CTkEntry(frm, width=300, height=250)\par
Entry1.grid(column=1, row=0, rowspan=3, padx=10, pady=5)\par
# Iniciar la aplicaci\'f3n\par
root.mainloop()\par
\highlight0\par
\lang10 -------------------------------------------------------------------------------------------------------------------\par

\pard\nowidctlpar\sa200\sl276\slmult1\qc\b\fs40 consideraciones importantes\b0\fs22\par

\pard\nowidctlpar\sa200\sl276\slmult1 1. C\'f3digo en la PC (Visual Studio Code)\par
Tu script en Python con Tkinter y usara un COMx Si esta Thonny abierto la aplicacion no podra aceder al COMx. \par
Env\'eda el texto que escribes al puerto serie con:\par
ser = serial.Serial('COM4', 115200)\par
 ser.write((texto+'\\n').encode('utf-8'))\par
\highlight3\b IMPORTANTE: \b0 Debes enviar un salto de l\'ednea \\n al final del texto, para que el input() en MicroPython detecte el fin de l\'ednea y devuelva el texto recibido.\highlight0\par
\par

\pard\nowidctlpar\sa200\sl276\slmult1\qc\b  \fs40 Resumen / Flujo esperado\b0\fs22\par

\pard\nowidctlpar\sa200\sl276\slmult1 Ejecutas el c\'f3digo MicroPython en la Pico, que queda esperando con texto = input().\par
Ejecutas el programa GUI en VS Code.\par
Escribes texto en la ventana Tkinter y haces clic en "Enviar".\par
El texto se env\'eda con salto de l\'ednea al puerto serie USB.\par
La Pico recibe el texto con input() y muestra cada letra con los LEDs.\par
\par
4. Tips para asegurar que funcione\par
Verifica que la velocidad (baudrate) sea 115200 en ambos lados.\par
Aseg\'farate que la Pico no est\'e9 usando otro programa que ocupe el puerto.\par
En el PC, para depurar, puedes agregar prints en enviar_texto para ver qu\'e9 env\'edas.\par
En la Pico, puedes imprimir el texto recibido justo despu\'e9s de texto = input() para verificar.\par

\pard\widctlpar\sa160\sl252\slmult1\kerning2\par
}
 